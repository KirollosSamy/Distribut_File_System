// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: master_client.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MasterToClientService_UploadSuccess_FullMethodName = "/master_client.MasterToClientService/UploadSuccess"
)

// MasterToClientServiceClient is the client API for MasterToClientService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MasterToClientServiceClient interface {
	UploadSuccess(ctx context.Context, in *Success, opts ...grpc.CallOption) (*Empty, error)
}

type masterToClientServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMasterToClientServiceClient(cc grpc.ClientConnInterface) MasterToClientServiceClient {
	return &masterToClientServiceClient{cc}
}

func (c *masterToClientServiceClient) UploadSuccess(ctx context.Context, in *Success, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, MasterToClientService_UploadSuccess_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MasterToClientServiceServer is the server API for MasterToClientService service.
// All implementations must embed UnimplementedMasterToClientServiceServer
// for forward compatibility
type MasterToClientServiceServer interface {
	UploadSuccess(context.Context, *Success) (*Empty, error)
	mustEmbedUnimplementedMasterToClientServiceServer()
}

// UnimplementedMasterToClientServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMasterToClientServiceServer struct {
}

func (UnimplementedMasterToClientServiceServer) UploadSuccess(context.Context, *Success) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadSuccess not implemented")
}
func (UnimplementedMasterToClientServiceServer) mustEmbedUnimplementedMasterToClientServiceServer() {}

// UnsafeMasterToClientServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MasterToClientServiceServer will
// result in compilation errors.
type UnsafeMasterToClientServiceServer interface {
	mustEmbedUnimplementedMasterToClientServiceServer()
}

func RegisterMasterToClientServiceServer(s grpc.ServiceRegistrar, srv MasterToClientServiceServer) {
	s.RegisterService(&MasterToClientService_ServiceDesc, srv)
}

func _MasterToClientService_UploadSuccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Success)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterToClientServiceServer).UploadSuccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MasterToClientService_UploadSuccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterToClientServiceServer).UploadSuccess(ctx, req.(*Success))
	}
	return interceptor(ctx, in, info, handler)
}

// MasterToClientService_ServiceDesc is the grpc.ServiceDesc for MasterToClientService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MasterToClientService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "master_client.MasterToClientService",
	HandlerType: (*MasterToClientServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadSuccess",
			Handler:    _MasterToClientService_UploadSuccess_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "master_client.proto",
}

const (
	ClientToMasterService_UploadFile_FullMethodName   = "/master_client.ClientToMasterService/UploadFile"
	ClientToMasterService_DownloadFile_FullMethodName = "/master_client.ClientToMasterService/DownloadFile"
)

// ClientToMasterServiceClient is the client API for ClientToMasterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientToMasterServiceClient interface {
	UploadFile(ctx context.Context, in *UploadRequest, opts ...grpc.CallOption) (*AssignedPort, error)
	DownloadFile(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (*DownloadResponse, error)
}

type clientToMasterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClientToMasterServiceClient(cc grpc.ClientConnInterface) ClientToMasterServiceClient {
	return &clientToMasterServiceClient{cc}
}

func (c *clientToMasterServiceClient) UploadFile(ctx context.Context, in *UploadRequest, opts ...grpc.CallOption) (*AssignedPort, error) {
	out := new(AssignedPort)
	err := c.cc.Invoke(ctx, ClientToMasterService_UploadFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientToMasterServiceClient) DownloadFile(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (*DownloadResponse, error) {
	out := new(DownloadResponse)
	err := c.cc.Invoke(ctx, ClientToMasterService_DownloadFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientToMasterServiceServer is the server API for ClientToMasterService service.
// All implementations must embed UnimplementedClientToMasterServiceServer
// for forward compatibility
type ClientToMasterServiceServer interface {
	UploadFile(context.Context, *UploadRequest) (*AssignedPort, error)
	DownloadFile(context.Context, *DownloadRequest) (*DownloadResponse, error)
	mustEmbedUnimplementedClientToMasterServiceServer()
}

// UnimplementedClientToMasterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedClientToMasterServiceServer struct {
}

func (UnimplementedClientToMasterServiceServer) UploadFile(context.Context, *UploadRequest) (*AssignedPort, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedClientToMasterServiceServer) DownloadFile(context.Context, *DownloadRequest) (*DownloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadFile not implemented")
}
func (UnimplementedClientToMasterServiceServer) mustEmbedUnimplementedClientToMasterServiceServer() {}

// UnsafeClientToMasterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientToMasterServiceServer will
// result in compilation errors.
type UnsafeClientToMasterServiceServer interface {
	mustEmbedUnimplementedClientToMasterServiceServer()
}

func RegisterClientToMasterServiceServer(s grpc.ServiceRegistrar, srv ClientToMasterServiceServer) {
	s.RegisterService(&ClientToMasterService_ServiceDesc, srv)
}

func _ClientToMasterService_UploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientToMasterServiceServer).UploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientToMasterService_UploadFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientToMasterServiceServer).UploadFile(ctx, req.(*UploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientToMasterService_DownloadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientToMasterServiceServer).DownloadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientToMasterService_DownloadFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientToMasterServiceServer).DownloadFile(ctx, req.(*DownloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClientToMasterService_ServiceDesc is the grpc.ServiceDesc for ClientToMasterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientToMasterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "master_client.ClientToMasterService",
	HandlerType: (*ClientToMasterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadFile",
			Handler:    _ClientToMasterService_UploadFile_Handler,
		},
		{
			MethodName: "DownloadFile",
			Handler:    _ClientToMasterService_DownloadFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "master_client.proto",
}
