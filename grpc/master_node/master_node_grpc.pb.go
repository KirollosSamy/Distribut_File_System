// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: master_node.proto

package master_node

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NodeToMasterServiceClient is the client API for NodeToMasterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeToMasterServiceClient interface {
	KeepMeAlive(ctx context.Context, in *HeartBeat, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ConfirmUpload(ctx context.Context, in *FileUploadStatus, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type nodeToMasterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeToMasterServiceClient(cc grpc.ClientConnInterface) NodeToMasterServiceClient {
	return &nodeToMasterServiceClient{cc}
}

func (c *nodeToMasterServiceClient) KeepMeAlive(ctx context.Context, in *HeartBeat, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/master_node.NodeToMasterService/KeepMeAlive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeToMasterServiceClient) ConfirmUpload(ctx context.Context, in *FileUploadStatus, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/master_node.NodeToMasterService/ConfirmUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeToMasterServiceServer is the server API for NodeToMasterService service.
// All implementations must embed UnimplementedNodeToMasterServiceServer
// for forward compatibility
type NodeToMasterServiceServer interface {
	KeepMeAlive(context.Context, *HeartBeat) (*emptypb.Empty, error)
	ConfirmUpload(context.Context, *FileUploadStatus) (*emptypb.Empty, error)
	mustEmbedUnimplementedNodeToMasterServiceServer()
}

// UnimplementedNodeToMasterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNodeToMasterServiceServer struct {
}

func (UnimplementedNodeToMasterServiceServer) KeepMeAlive(context.Context, *HeartBeat) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KeepMeAlive not implemented")
}
func (UnimplementedNodeToMasterServiceServer) ConfirmUpload(context.Context, *FileUploadStatus) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmUpload not implemented")
}
func (UnimplementedNodeToMasterServiceServer) mustEmbedUnimplementedNodeToMasterServiceServer() {}

// UnsafeNodeToMasterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeToMasterServiceServer will
// result in compilation errors.
type UnsafeNodeToMasterServiceServer interface {
	mustEmbedUnimplementedNodeToMasterServiceServer()
}

func RegisterNodeToMasterServiceServer(s grpc.ServiceRegistrar, srv NodeToMasterServiceServer) {
	s.RegisterService(&NodeToMasterService_ServiceDesc, srv)
}

func _NodeToMasterService_KeepMeAlive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartBeat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeToMasterServiceServer).KeepMeAlive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/master_node.NodeToMasterService/KeepMeAlive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeToMasterServiceServer).KeepMeAlive(ctx, req.(*HeartBeat))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeToMasterService_ConfirmUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileUploadStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeToMasterServiceServer).ConfirmUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/master_node.NodeToMasterService/ConfirmUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeToMasterServiceServer).ConfirmUpload(ctx, req.(*FileUploadStatus))
	}
	return interceptor(ctx, in, info, handler)
}

// NodeToMasterService_ServiceDesc is the grpc.ServiceDesc for NodeToMasterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodeToMasterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "master_node.NodeToMasterService",
	HandlerType: (*NodeToMasterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "KeepMeAlive",
			Handler:    _NodeToMasterService_KeepMeAlive_Handler,
		},
		{
			MethodName: "ConfirmUpload",
			Handler:    _NodeToMasterService_ConfirmUpload_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "master_node.proto",
}

// MasterToNodeServiceClient is the client API for MasterToNodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MasterToNodeServiceClient interface {
	RegisterNode(ctx context.Context, in *RegisterNodeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Replicate(ctx context.Context, in *ReplicateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type masterToNodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMasterToNodeServiceClient(cc grpc.ClientConnInterface) MasterToNodeServiceClient {
	return &masterToNodeServiceClient{cc}
}

func (c *masterToNodeServiceClient) RegisterNode(ctx context.Context, in *RegisterNodeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/master_node.MasterToNodeService/RegisterNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterToNodeServiceClient) Replicate(ctx context.Context, in *ReplicateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/master_node.MasterToNodeService/Replicate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MasterToNodeServiceServer is the server API for MasterToNodeService service.
// All implementations must embed UnimplementedMasterToNodeServiceServer
// for forward compatibility
type MasterToNodeServiceServer interface {
	RegisterNode(context.Context, *RegisterNodeRequest) (*emptypb.Empty, error)
	Replicate(context.Context, *ReplicateRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedMasterToNodeServiceServer()
}

// UnimplementedMasterToNodeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMasterToNodeServiceServer struct {
}

func (UnimplementedMasterToNodeServiceServer) RegisterNode(context.Context, *RegisterNodeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterNode not implemented")
}
func (UnimplementedMasterToNodeServiceServer) Replicate(context.Context, *ReplicateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Replicate not implemented")
}
func (UnimplementedMasterToNodeServiceServer) mustEmbedUnimplementedMasterToNodeServiceServer() {}

// UnsafeMasterToNodeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MasterToNodeServiceServer will
// result in compilation errors.
type UnsafeMasterToNodeServiceServer interface {
	mustEmbedUnimplementedMasterToNodeServiceServer()
}

func RegisterMasterToNodeServiceServer(s grpc.ServiceRegistrar, srv MasterToNodeServiceServer) {
	s.RegisterService(&MasterToNodeService_ServiceDesc, srv)
}

func _MasterToNodeService_RegisterNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterToNodeServiceServer).RegisterNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/master_node.MasterToNodeService/RegisterNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterToNodeServiceServer).RegisterNode(ctx, req.(*RegisterNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterToNodeService_Replicate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplicateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterToNodeServiceServer).Replicate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/master_node.MasterToNodeService/Replicate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterToNodeServiceServer).Replicate(ctx, req.(*ReplicateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MasterToNodeService_ServiceDesc is the grpc.ServiceDesc for MasterToNodeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MasterToNodeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "master_node.MasterToNodeService",
	HandlerType: (*MasterToNodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterNode",
			Handler:    _MasterToNodeService_RegisterNode_Handler,
		},
		{
			MethodName: "Replicate",
			Handler:    _MasterToNodeService_Replicate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "master_node.proto",
}
