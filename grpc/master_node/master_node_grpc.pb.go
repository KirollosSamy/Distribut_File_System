// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: master_node.proto

package master_node

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NodeToMasterClient is the client API for NodeToMaster service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeToMasterClient interface {
	KeepMeAlive(ctx context.Context, opts ...grpc.CallOption) (NodeToMaster_KeepMeAliveClient, error)
	ConfirmUpload(ctx context.Context, in *FileUploadStatus, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type nodeToMasterClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeToMasterClient(cc grpc.ClientConnInterface) NodeToMasterClient {
	return &nodeToMasterClient{cc}
}

func (c *nodeToMasterClient) KeepMeAlive(ctx context.Context, opts ...grpc.CallOption) (NodeToMaster_KeepMeAliveClient, error) {
	stream, err := c.cc.NewStream(ctx, &NodeToMaster_ServiceDesc.Streams[0], "/master_node.NodeToMaster/KeepMeAlive", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeToMasterKeepMeAliveClient{stream}
	return x, nil
}

type NodeToMaster_KeepMeAliveClient interface {
	Send(*HeartBeat) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type nodeToMasterKeepMeAliveClient struct {
	grpc.ClientStream
}

func (x *nodeToMasterKeepMeAliveClient) Send(m *HeartBeat) error {
	return x.ClientStream.SendMsg(m)
}

func (x *nodeToMasterKeepMeAliveClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeToMasterClient) ConfirmUpload(ctx context.Context, in *FileUploadStatus, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/master_node.NodeToMaster/ConfirmUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeToMasterServer is the server API for NodeToMaster service.
// All implementations must embed UnimplementedNodeToMasterServer
// for forward compatibility
type NodeToMasterServer interface {
	KeepMeAlive(NodeToMaster_KeepMeAliveServer) error
	ConfirmUpload(context.Context, *FileUploadStatus) (*emptypb.Empty, error)
	mustEmbedUnimplementedNodeToMasterServer()
}

// UnimplementedNodeToMasterServer must be embedded to have forward compatible implementations.
type UnimplementedNodeToMasterServer struct {
}

func (UnimplementedNodeToMasterServer) KeepMeAlive(NodeToMaster_KeepMeAliveServer) error {
	return status.Errorf(codes.Unimplemented, "method KeepMeAlive not implemented")
}
func (UnimplementedNodeToMasterServer) ConfirmUpload(context.Context, *FileUploadStatus) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmUpload not implemented")
}
func (UnimplementedNodeToMasterServer) mustEmbedUnimplementedNodeToMasterServer() {}

// UnsafeNodeToMasterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeToMasterServer will
// result in compilation errors.
type UnsafeNodeToMasterServer interface {
	mustEmbedUnimplementedNodeToMasterServer()
}

func RegisterNodeToMasterServer(s grpc.ServiceRegistrar, srv NodeToMasterServer) {
	s.RegisterService(&NodeToMaster_ServiceDesc, srv)
}

func _NodeToMaster_KeepMeAlive_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NodeToMasterServer).KeepMeAlive(&nodeToMasterKeepMeAliveServer{stream})
}

type NodeToMaster_KeepMeAliveServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*HeartBeat, error)
	grpc.ServerStream
}

type nodeToMasterKeepMeAliveServer struct {
	grpc.ServerStream
}

func (x *nodeToMasterKeepMeAliveServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *nodeToMasterKeepMeAliveServer) Recv() (*HeartBeat, error) {
	m := new(HeartBeat)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _NodeToMaster_ConfirmUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileUploadStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeToMasterServer).ConfirmUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/master_node.NodeToMaster/ConfirmUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeToMasterServer).ConfirmUpload(ctx, req.(*FileUploadStatus))
	}
	return interceptor(ctx, in, info, handler)
}

// NodeToMaster_ServiceDesc is the grpc.ServiceDesc for NodeToMaster service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodeToMaster_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "master_node.NodeToMaster",
	HandlerType: (*NodeToMasterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConfirmUpload",
			Handler:    _NodeToMaster_ConfirmUpload_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "KeepMeAlive",
			Handler:       _NodeToMaster_KeepMeAlive_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "master_node.proto",
}

// MasterToNodeClient is the client API for MasterToNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MasterToNodeClient interface {
	RegisterNode(ctx context.Context, in *RegisterNodeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Replicate(ctx context.Context, in *ReplicateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type masterToNodeClient struct {
	cc grpc.ClientConnInterface
}

func NewMasterToNodeClient(cc grpc.ClientConnInterface) MasterToNodeClient {
	return &masterToNodeClient{cc}
}

func (c *masterToNodeClient) RegisterNode(ctx context.Context, in *RegisterNodeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/master_node.MasterToNode/RegisterNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterToNodeClient) Replicate(ctx context.Context, in *ReplicateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/master_node.MasterToNode/Replicate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MasterToNodeServer is the server API for MasterToNode service.
// All implementations must embed UnimplementedMasterToNodeServer
// for forward compatibility
type MasterToNodeServer interface {
	RegisterNode(context.Context, *RegisterNodeRequest) (*emptypb.Empty, error)
	Replicate(context.Context, *ReplicateRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedMasterToNodeServer()
}

// UnimplementedMasterToNodeServer must be embedded to have forward compatible implementations.
type UnimplementedMasterToNodeServer struct {
}

func (UnimplementedMasterToNodeServer) RegisterNode(context.Context, *RegisterNodeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterNode not implemented")
}
func (UnimplementedMasterToNodeServer) Replicate(context.Context, *ReplicateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Replicate not implemented")
}
func (UnimplementedMasterToNodeServer) mustEmbedUnimplementedMasterToNodeServer() {}

// UnsafeMasterToNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MasterToNodeServer will
// result in compilation errors.
type UnsafeMasterToNodeServer interface {
	mustEmbedUnimplementedMasterToNodeServer()
}

func RegisterMasterToNodeServer(s grpc.ServiceRegistrar, srv MasterToNodeServer) {
	s.RegisterService(&MasterToNode_ServiceDesc, srv)
}

func _MasterToNode_RegisterNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterToNodeServer).RegisterNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/master_node.MasterToNode/RegisterNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterToNodeServer).RegisterNode(ctx, req.(*RegisterNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterToNode_Replicate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplicateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterToNodeServer).Replicate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/master_node.MasterToNode/Replicate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterToNodeServer).Replicate(ctx, req.(*ReplicateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MasterToNode_ServiceDesc is the grpc.ServiceDesc for MasterToNode service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MasterToNode_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "master_node.MasterToNode",
	HandlerType: (*MasterToNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterNode",
			Handler:    _MasterToNode_RegisterNode_Handler,
		},
		{
			MethodName: "Replicate",
			Handler:    _MasterToNode_Replicate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "master_node.proto",
}
